'''
Given an array where elements are sorted in ascending order, convert it to a height balanced BST.
'''
# Definition for a binary tree node.
class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution(object):
    def sortedArrayToBST(self, nums):
        """
        :type nums: List[int]
        :rtype: TreeNode
        """
        if not nums:
            return None
        elif len(nums) == 1:
            root = TreeNode(nums[0])
            return root
        else:
            mid = nums[len(nums)/2]
            root = TreeNode(mid)
            root.left = self.sortedArrayToBST(nums[:len(nums)/2])
            root.right = self.sortedArrayToBST(nums[len(nums)/2+1:])
            return root
    nums = [1,3,6,7,8,10,15,25]
s = Solution()
print s.sortedArrayToBST(nums).val
print s.sortedArrayToBST(nums).left.val
print s.sortedArrayToBST(nums).right.val
print s.sortedArrayToBST(nums).left.left.val
print s.sortedArrayToBST(nums).left.right.val
print s.sortedArrayToBST(nums).right.left.val
print s.sortedArrayToBST(nums).right.right.val
print s.sortedArrayToBST(nums).left.left.left.val
print s.sortedArrayToBST(nums).left.left.right
