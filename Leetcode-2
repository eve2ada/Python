# -*- coding: utf-8 -*-
"""
Created on Fri Mar 24 17:39:09 2017

@author: eve2ada
"""

'''
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
'''
# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None
def addTwoNumbers(l1, l2):
    """
    :type l1: ListNode
    :type l2: ListNode
    :rtype: ListNode
    """
    x = addLinkedList(l1)
    y = addLinkedList(l2)
    z = str(int(x) + int(y))
    
    head = ListNode(int(z[-1]))
    tail = head
    
    for i in range(len(z)-2, -1, -1):
        tail.next = ListNode(int(z[i]))
        tail = tail.next
    return head
        
    
def addLinkedList(L):
    x = str(L.val)
    tmp = L
    while tmp.next:
        x = str(tmp.next.val) + x
        tmp = tmp.next
    return x
        
