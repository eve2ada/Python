#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 12 17:00:55 2017

@author: evelyn
"""

'''
Write an efficient algorithm that searches for a value in an m x n matrix. 
This matrix has the following properties:

    Integers in each row are sorted from left to right.
    The first integer of each row is greater than the last integer of the 
    previous row.

For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]

Given target = 3, return true.
'''

def searchMatrix(matrix, target):
    """
    :type matrix: List[List[int]]
    :type target: int
    :rtype: bool
    """
    n = len(matrix)
    if n == 0 or matrix == [[]]:
       return False
   
    if matrix[0][0] > target or matrix[n-1][-1] < target:
        return False
    
    for i in range(n):
        if target == matrix[i][-1]:
            return True
        if target < matrix[i][-1]:
            for item in matrix[i]:
                if item == target:
                    return True
            return False
    
    return False
    
    
