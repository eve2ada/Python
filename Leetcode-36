
'''
Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.

The Sudoku board could be partially filled, where empty cells are filled with the 
character '.'.
'''
class Solution(object):
    def isValidSudoku(self,board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        num = ['1','2','3','4','5','6','7','8','9','.']
        if not board:
            return False
        if len(board) != 9:
            return False
        #check if rows are valid
        for i in range(9):
            temp = []
            if len(board[i]) != 9:
                return False
            for j in range(9):
                if board[i][j] not in num:
                    return False
                if board[i][j] != '.':
                    temp.append(board[i][j])
            if len(temp) != len(set(temp)):
                return False
        
        #check if columns are valid
        for i in range(9): #column
            temp = []
            for j in range(9): #row
                if board[j][i] != '.':
                    temp.append(board[j][i])
            if len(temp) != len(set(temp)):
                return False  
        
        #check if each unit is valid
        return self.unitCheck(0,board) and self.unitCheck(3,board) and self.unitCheck(6,board)
            
    def unitCheck(self,x,board):
        temp0, temp1, temp2 = [],[],[]
        for i in range(x,x+3):
            for j in range(3): #column
                if board[i][j] != '.':
                    temp0.append(board[i][j])
            for j in range(3,6):
                if board[i][j] != '.':
                    temp1.append(board[i][j])
            for j in range(6,9):
                if board[i][j] != '.':
                    temp2.append(board[i][j])
        if len(temp0) != len(set(temp0)):
            return False
        if len(temp1) != len(set(temp1)):
            return False
        if len(temp2) != len(set(temp2)):
            return False
        
        return True
        
