'''
 Given n pairs of parentheses, write a function to generate all 
 combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()" 
'''

class Solution:
    def generateParenthesis(self,n):
        """
        :type n: int
        :rtype: List[str]
        """
        if n == 0:
            return []
        left,right,ans = n,n,[]
        self.DF(left,right,ans,'')
        return ans
        
        
    def DF(self,left,right,ans,string):
        if right < left:
            return
        if right == left == 0:
            ans.append(string)
            return
        if left:
            self.DF(left-1,right,ans,string+'(')
        if right:
            self.DF(left, right-1, ans, string+')')              
