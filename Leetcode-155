'''
 Design a stack that supports push, pop, top, and retrieving the minimum element 
 in constant time.

    push(x) -- Push element x onto stack.
    pop() -- Removes the element on top of the stack.
    top() -- Get the top element.
    getMin() -- Retrieve the minimum element in the stack.
'''
class MinStack(object):
    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stack = []
        self.minStack = []
        

    def push(self, x):
        """
        :type x: int
        :rtype: nothing
        """
#        self.stack.insert(0,x)
        if self.minStack == [] or self.minStack[-1] >= x:
            self.minStack.append(x)
        self.stack.append(x)
        

    def pop(self):
        """
        :rtype: nothing
        """
        if self.stack[-1] == self.minStack[-1]:
            self.minStack.pop()
        if self.stack != []:
            self.stack.pop()
        

    def top(self):
        """
        :rtype: int
        """
        if self.stack != []:
            return self.stack[-1]
        else:
            return None
        

    def getMin(self):
        """
        :rtype: int
        """
        if self.minStack != []:
            return self.minStack[-1]
        else:
            return None
