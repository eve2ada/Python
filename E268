#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Mon Sep 11 16:11:13 2017

@author: evelyn
"""

'''
 Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, 
 find the one that is missing from the array.

For example,
Given nums = [0, 1, 3] return 2.

Note:
Your algorithm should run in linear runtime complexity. 
Could you implement it using only constant extra space complexity? 
'''
def missingNumber(self, nums):
    """
    :type nums: List[int]
    :rtype: int
    """
    n = len(nums)
    if n == 1 and nums[0] == 0:
        return 1

    sorted_nums = list(sorted(nums))
    if sorted_nums[0] != 0:
        return 0
    if sorted_nums[n-1] < n:
        return n
    for i in range(1,n):
        if sorted_nums[i] != sorted_nums[i-1] + 1:
            return sorted_nums[i-1] + 1

            
