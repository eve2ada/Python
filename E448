#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Thu Sep 14 17:05:50 2017

@author: evelyn
"""

'''
Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some 
elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume 
the returned list does not count as extra space.
Example:

Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]
'''
def findDisappearedNumbers(nums):
    """
    :type nums: List[int]
    :rtype: List[int]
    """
    n = len(nums)
    
    if n == 0:
        return []
    
    for item in nums:
        nums[abs(item) - 1] = -1*abs(nums[abs(item) - 1])
    
    return [i + 1 for i in range(len(nums)) if nums[i] > 0]
            
                        
