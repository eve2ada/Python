‘’‘
Design a data structure that supports all following operations in average O(1) time.

    insert(val): Inserts an item val to the set if not already present.
    remove(val): Removes an item val from the set if present.
    getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.

’‘’

class RandomizedSet(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.items = []
        self.dic = {}
        

    def insert(self, val):
        """
        Inserts a value to the set. Returns true if the set did not already contain 
        the specified element.
        :type val: int
        :rtype: bool
        """
        if val in self.dic:
            return False
        else:
            self.items.append(val)
            self.dic[val] = len(self.items) - 1
            return True

    def remove(self, val):
        """
        Removes a value from the set. Returns true if the set contained the specified 
        element.
        :type val: int
        :rtype: bool
        """
        if val not in self.dic:
            return False
        else:
            idx = self.dic[val]
            self.items[idx] = self.items[-1]
            self.items.pop(-1)
            self.dic.pop(val,0)
            return True
        

    def getRandom(self):
        """
        Get a random element from the set.
        :rtype: int
        """
        import random
        r = random.randrange(0, len(self.items))
        return self.items[r]
        


# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()
