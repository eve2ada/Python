'''
Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.

Note:
Given n will always be valid.
Try to do this in one pass. 
'''
# Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution:
    # @param {ListNode} head
    # @param {integer} n
    # @return {ListNode}
    def removeNthFromEnd(self, head, n):
        temp1 = head
        temp2 = head 

        i = 1
        j = 1
        if head.next is None:
            return None                

        while temp1.next is not None:
            temp1 = temp1.next
            i += 1

        if i == n:
            return head.next            
            
        while temp2.next is not None:
            if j == i - n:
                temp2.next = temp2.next.next
                break

            temp2 = temp2.next
            j += 1

        return head
