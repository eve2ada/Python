'''
Given a sorted linked list, delete all duplicates such that each element 
appear only once.

For example,
Given 1->1->2, return 1->2.
Given 1->1->2->3->3, return 1->2->3. 
'''
# Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution:
    # @param {ListNode} head
    # @return {ListNode}
    def deleteDuplicates(self, head):
        if not head:
            return None
        else:
            pre = head
            cur = head.next
            while cur is not None:
                if cur.val == pre.val:
                    pre.next = cur.next
                    cur = cur.next
                else:
                    pre = cur
                    cur = cur.next
            return head

a = ListNode(2)
b = ListNode(2)
c = ListNode(2)
'''
d = ListNode(3)
e = ListNode(4)
f = ListNode(5)
g = ListNode(6)
'''


a.next = b
a.val = 2

b.next = c
b.val = 2

c.next = None
c.val = 2
'''
d.next = e
d.val = 3

e.next = f
e.val = 4

f.next = g
f.val = 5

g.next = None
g.val = 6
'''

s = Solution()
result = s.deleteDuplicates(a)
print result.next
print result.val
